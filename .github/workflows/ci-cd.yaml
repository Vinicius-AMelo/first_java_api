name: CI/CD

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: 'adopt'
          java-package: jdk
          architecture: x64
          check-latest: false
          server-id: github
          server-username: GITHUB_ACTOR
          server-password: GITHUB_TOKEN
          overwrite-settings: true
          job-status: success
      - name: Grant execute permission to mvnw
        run: chmod +x mvnw
      - name: Build JAR
        run: ./mvnw package -DskipTests
      - name: Build Docker image - app
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}
          build-args: |
            - POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            - POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            - POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          # remove 'dockerfile', 'username', 'password'
      - name: Build Docker image - db
        uses: docker/build-push-action@v2
        with:
          context: ./.docker/postgres
          push: true
          tags: ${{ env.IMAGE_NAME }}-db
          # remove 'dockerfile', 'username', 'password'
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
  deploy:
    name: Deploy Docker image
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
    steps:
      - name: Deploy Docker image
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            docker-compose pull minha-aplicacao
            docker-compose up -d minha-aplicacao
